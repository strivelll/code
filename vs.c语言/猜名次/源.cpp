////5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果：
////A选手说：B第二，我第三；
////
////B选手说：我第二，E第四；
////
////C选手说：我第一，D第二；
////
////D选手说：C最后，我第三；
////
////E选手说：我第四，A第一；
////
////比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。
//#include<stdio.h>
//int checkdata(int* p) {
//	int t[7] = { 0 };
//	for (int i = 0; i < 5; i++) {
//		if (t[p[i]]) {
//			return 0;
//		}
//		t[p[i]] = 1;
//	}
//	return 1;
//}
//int main()
//{
//	int p[5] ;
//	for (p[0] = 1; p[0] <= 5; p[0]++) {
//		for (p[1] = 1; p[1] <= 5; p[1]++) {
//			for (p[2] = 1; p[2] <= 5; p[2]++) {
//				for (p[3] = 1; p[3] <= 5; p[3]++) {
//					for (p[4] = 1; p[4] <= 5; p[4]++) {
//						if((p[0]==3)+(p[1]==2)==1&&
//							(p[1]==2)+(p[4]==4)==1&&
//							(p[2]==1)+(p[3]==2)==1&&
//							(p[2]==5)+(p[3]==3)==1&&
//							(p[4]==4) + (p[0]==1) == 1 &&
//							checkdata(p)) {
//							for (int i = 0; i < 5; i++)
//							{
//								printf("%c 第%d名\n", i+65,p[i]);
//							}
//						}
//					}
//				}
//			}
//		}
//	}
//	return 0;
//}
//void diveRank(int* p, int n)
//{
//	if (n >= 5) //此时的n是用来控制循环层数的。
//	{
//		if ((p[1] == 2) + (p[0] == 3) == 1 && //B第二，我第三
//			(p[1] == 2) + (p[4] == 4) == 1 && //我第二，E第四
//			(p[2] == 1) + (p[3] == 2) == 1 && //我第一，D第二
//			(p[2] == 5) + (p[3] == 3) == 1 && //C最后，我第三
//			(p[4] == 4) + (p[0] == 1) == 1 && //我第四，A第一
//			checkdata(p)) //查重
//		{
//			for (int i = 0; i < 5; i++)
//			{
//				printf("%d ", p[i]);
//			}
//			putchar('\n');
//		}
//		return;
//	}
//
//	for (p[n] = 1; p[n] <= 5; p[n]++)
//	{
//		diveRank(p, n + 1); //通过递归模拟多层循环，每进一次递归相当于进了一层新的循环。
//	}
//}
//
//int main()
//{
//	int p[5];
//
//	diveRank(p, 0);
//
//	return 0;
//}
#include <stdio.h>

void swapArgs(int* a, int* b) //交换函数
{
	int tmp;

	tmp = *a;
	*a = *b;
	*b = tmp;
}

void diveRank(int* p, int n)
{
	if (n >= 5) //此时的n也是用来控制循环层数的。
	{
		if ((p[1] == 2) + (p[0] == 3) == 1 && //B第二，我第三
			(p[1] == 2) + (p[4] == 4) == 1 && //我第二，E第四
			(p[2] == 1) + (p[3] == 2) == 1 && //我第一，D第二
			(p[2] == 5) + (p[3] == 3) == 1 && //C最后，我第三
			(p[4] == 4) + (p[0] == 1) == 1)   //我第四，A第一
			//由于此时是执行的全排列，所以查重也省了。
		{
			for (int i = 0; i < 5; i++)
			{
				printf("%d ", p[i]);
			}
			putchar('\n');
		}
		return;
	}

	int i;
	for (i = n; i < 5; i++) //这个递归方式就完成了对1~5的全排列，方法是从后向前不停的执行交换。可以参考改进二和原代码，将这个递归程序写回成循环后，可以更好的理解。
	{
		swapArgs(p + i, p + n);
		diveRank(p, n + 1);
		swapArgs(p + i, p + n);
	}
}

int main()
{
	int p[5] = { 1, 2, 3, 4, 5 }; //当然由于是全排列，所以初值必须给好。

	diveRank(p, 0);

	return 0;
}